1. 资源加载
    1.1 网络建连
        1.1.1 DNS: 前端控制域名个数---减少 DNS 解析
        1.1.2 http: 开启http2
    
    1.2 静态资源加载
        1.2.1 开启压缩(图片等)
        1.2.2 精简代码: 无用代码、重复代码、tree shaking
        1.2.3 动态图片尺寸(图片压缩、图片分割、WebP格式)
    
    1.3 流程优化
        1.3.1 配置缓存
        1.3.2 使用 CDN
        1.3.3 CDN 优化: 主备切换、速度探测
        1.3.4 协调资源加载优先级: 重点资源提前加载, 同优先级并行
        1.3.5 动态资源转静态: CDN 加载性能更好
        1.3.6 脚本本地离线缓存
        1.3.7 资源懒加载：路由、模块
        1.3.8 stream 流式数据传输

2. 代码执行
    2.1 执行减少: 
        2.1.1 减少自执行代码: 静态引入模块时发生
        2.1.2 防抖节流

    2.2 速度提升: worker 多线程加速

    2.3 流程优化:
        2.3.1 延迟执行: 非首屏模块执行后置
        2.3.2 示例延迟初始化: 配合 proxy 优化代码流程
        2.3.3 长任务拆分 + 闲时执行
    
3. 数据获取
    3.1 内容优化
        3.1.1 减少请求: 核心数据、请求合并
        3.1.2 减少数据转换
    
    3.2 流程优化
        3.2.1 数据缓存
        3.2.2 延迟请求: 非首屏请求延迟加载
        3.2.3 请求并行
    
4. 绘制渲染
    3.1 虚拟列表
    3.2 延迟渲染
    3.3 减少回流重绘